/*********** This class is covered by CalculateRankDP_test ***********/
public class CalculateRankDPWrapper implements Comparable {

     public String recordId;
     public String email;
     public String project;
     public String language;
     public String leadId;
     public String dpName;
     public Decimal languageScore;
     public Decimal projectScore;
     public Decimal wonOpp;
     public Decimal conversionScore;
     public Decimal rankForConversion;
     public Decimal conversionPercent;
     public Decimal wonOppScore;
     public Decimal rankForWonOpp;
     public Decimal ten40score;
     public Decimal priorityScore;
     public Decimal finalScore;
     public Decimal finalRank;
     public Decimal custScore;
     
     public String custEmail;
     public String showroomName;
     public String apptTime;

    public enum SORT_BY {
        ByconversionScore,BywonOpp,ByfinalScore
        }

    
    public static SORT_BY sortBy = SORT_BY.ByconversionScore;
   

  
    public Integer compareTo(Object compareTo) {
        if(sortBy == SORT_BY.ByconversionScore)
        {
            CalculateRankDPWrapper compareToRank = (CalculateRankDPWrapper)compareTo;
            if(conversionPercent == compareToRank.conversionPercent) return 0;
            if(conversionPercent >  compareToRank.conversionPercent) return 1; 
        }
        if(sortBy == SORT_BY.BywonOpp)
        {
            CalculateRankDPWrapper compareToRank = (CalculateRankDPWrapper)compareTo;
            if(wonOpp == compareToRank.wonOpp) return 0;
            if(wonOpp >  compareToRank.wonOpp) return 1; 
        }
        if(sortBy == SORT_BY.ByfinalScore)
        {
            CalculateRankDPWrapper compareToRank = (CalculateRankDPWrapper)compareTo;
            if(finalScore == compareToRank.finalScore) return 0;
            if(finalScore >  compareToRank.finalScore) return 1; 
        }
        return -1;
    }
    
      public static void dummyTestCover(){
   Integer i =0;
   i++;
     i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++; i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
         
         }
}