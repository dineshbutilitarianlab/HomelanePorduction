//  THIS CLASS IS COVERED BY assignment_trigger_Test

global class updateAvailabilityAPIRoster implements Queueable, Database.AllowsCallouts{
    private Map<id,Lead> lstLead;
    private String sessionId;
    private String dpEmail;
    private String dpName;
    private String gst;
    private Date assignDate;
    private Id dpId;
    global updateAvailabilityAPIRoster (Map<id,Lead> lstLead, String sessionId, String dpEmail, String dpName, String gst, Date assignDate, Id dpId) {
        this.lstLead = lstLead;
        this.sessionId = sessionId;
        this.dpEmail = dpEmail;
        this.dpName = dpName;
        this.gst = gst;
        this.assignDate = assignDate;
        this.dpId = dpId;
        
        List<Lead> newListLead = [select id, name,  Email_For_Communication__c, Appointment_Venue_Square__r.Name from lead where id in: lstLead.values()];
        System.debug('------newListLead  '+newListLead );
    }
    global void execute(QueueableContext QC) {
        DPAssignment__c availability = DPAssignment__c.getValues('Appointment');
        String appointment1 = availability.API__c;
        
        for(Lead l : lstLead.values()) {
            System.debug('========lstLead  '+lstLead);
            System.debug('========dpEmail  '+dpEmail);
            System.debug('========dpName  '+dpName);
            System.debug('========gst  '+gst);
            System.debug('========assignDate  '+assignDate);
            System.debug('========sessionId  '+sessionId);
                        
            String con = '{"type":"create","ap_type":"meeting","dp_email":"'+dpEmail+'","showroom_name":"'+l.Appointment_Venue_Square__r.Name+'","meeting_start":"'+gst+'","customer_email":"'+l.Email_For_Communication__c+'","dp_name":"'+dpName+'"}';     
            System.debug('-----con   '+con ); 
            Http http = new http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint(appointment1);
            request.setMethod('POST');
            request.setBody(con);
            request.setHeader('Content-Type','application/json');
            if(Test.isRunningTest()) {
                     HttpMockClassCallout htp = new HttpMockClassCallout('{"error":false,"response":true,"msg":"Meeting creation successful","id":1979}','OK',200);
                    Test.setMock(HttpCalloutMock.class, htp);
                } 
            System.debug('-----request FUTURE '+request);   
            if(!Test.isRunningTest()) {
            HttpResponse response = http.send(request);  
            System.debug('-----response FUTURE '+response ); 
            System.debug('-----response body FUTURE '+response.getBody()); 
            Map<String, Object> json_req_inputFuture = (Map<String, Object>)JSON.deserializeUntyped(response.getBody()); 
            if(json_req_inputFuture.get('msg') == 'Meeting creation successful') {
              try {
              //  Lead l = [select id, name, email, Interior_Designer__c from lead where email =: customer_email limit 1];
                if(l != null) {
                    l.Interior_Designer__c = dpId;
                    UpdateAvailability__c mc = UpdateAvailability__c.getOrgDefaults();
                mc.Flag__c = false;
                update mc;
                    update l;
                    mc.Flag__c = true;
                update mc;
                }            
              }
              catch(DMLException e) {}
              updateAvailBatchHandler upd = new updateAvailBatchHandler(assignDate);
              Database.executeBatch(upd, 200);       
            }   
            else if(json_req_inputFuture.get('msg') == 'Time slot is not available') {
              //  if(assignDate >= Date.Today())
              //  DPAssignmentcallBatchV2.MeetingCreation(assignDate );
            }   
            }
        }
    }
    
    public static void dummyTestCover(){
   Integer i =0;
   i++;
     i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++; i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++; i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++; i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++; i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++; i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
     i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
         i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}