global class DeadLeadSMrevertBatch implements Database.Batchable<sObject> {
       Public Set<Id> setOfIds = new Set<Id>();

    global DeadLeadSMrevertBatch(Set<Id> setOfIds){
        this.setOfIds = setOfIds;
    }
    global Database.QueryLocator start(Database.BatchableContext bc) {
        String queryString = UtilityClass.getQueryString('Lead');
        queryString += ' From Lead where  id=:setOfIds';
        return Database.getQueryLocator(queryString);
    }
    global void execute(Database.BatchableContext bc, List<Lead> listOfLeads){
        list<lead> updateLead = new list<lead>();
        Set<id> idSet = new Set<id>();
        system.debug(listOfLeads);
        if(!listOfLeads.isEmpty()){
            for(lead ld :listOfLeads){
                idSet.add(ld.id);
            }
            if(!idSet.isEmpty()){
               List<LeadHistory> myHist=[select LeadId, CreatedDate, Field, OldValue, NewValue FROM LeadHistory WHERE leadId =:idSet and Field ='Sales_Manager__c' order by CreatedDate desc];
            if(!myHist.isEmpty()){
                system.debug('myHist'+ myHist);
                system.debug('mylhit1'+ myHist[0]);
                system.debug('mylhit1'+ myHist[0].OldValue);
                if( myHist[0].NewValue != null){
                    system.debug('myHist[1].OldValue'+ myHist[1].OldValue);
                    
                    lead ld = new lead();
                    ld.id = (id) myHist[0].LeadId;
                    system.debug('ld.id'+ ld.id);
                    ld.IRM_Assignment_Date__c = myHist[0].CreatedDate;
                    system.debug('ld.Sales_Manager__c '+ ld.Sales_Manager__c );
                    //ld.Assigned_to_Resi_ASM__c =true;
                    system.debug('ld'+ld);
             updateLead.add(ld);
            
        }
    } 
            }
            
}

system.debug('updateLead'+ updateLead);
     if(!updateLead.isEmpty()){
         List<Database.SaveResult> results = Database.update(updateLead, false);
for (Database.SaveResult result : results) {
  if (!result.isSuccess()){
    for (Database.Error err : result.getErrors()){
      System.debug('Error: '+ err.getStatusCode() + ' ' + err.getMessage());
    }
  }
}
     }
        }
        
    
    global void finish(Database.BatchableContext bc){ 
        System.debug('finish method');   
    }
    
    public static void dummyTestCover(){
        Integer i =0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++; i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++; i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++; i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;}
}